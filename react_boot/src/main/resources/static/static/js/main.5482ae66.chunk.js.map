{"version":3,"sources":["components/TodoListTemplate.js","actions/index.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["TodoListTemplate","form","children","className","process","apiUrl","Form","state","input","handleChange","e","setState","target","value","handleCreate","props","addTodo","text","checked","handleKeyPress","key","this","onChange","onKeyPress","onClick","Component","connect","todo","dispatch","axios","post","then","res","type","payload","data","catch","error","console","log","TodoItem","handleRemove","id","removeTodo","handleToggle","toggleTodo","nextProps","nextState","stopPropagation","delete","put","TodoItemList","fetchAllTodos","todos","todoList","map","get","App","Boolean","window","location","hostname","match","initialState","store","createStore","action","Object","assign","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5482ae66.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\nconst TodoListTemplate = ({form,children}) => {\r\n    return (\r\n        <div className=\"todo-list-template\">\r\n            <div className=\"title\">\r\n                오늘의 할일 ({process.env.REACT_APP_TITLE})\r\n            </div>\r\n            <div className=\"form-wrapper\">\r\n                {form}\r\n            </div>\r\n            <div className=\"todos-wrapper\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoListTemplate;","import axios from 'axios';\r\n\r\n//Action Type 변수 정의\r\nexport const FETCH_TODOS = 'FETCH_TODOS';\r\nexport const ADD_TODO = \"ADD_TODO\";\r\nexport const REMOVE_TODO = \"REMOVE_TODO\";\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\r\n\r\n//Server 요청 URL\r\nconst apiUrl = process.env.REACT_APP_APIURL;\r\n//'http://localhost:4500/api/todos';\r\n\r\n//Todo 갱신\r\nexport const toggleTodo = todo => {\r\n    return (dispatch) => {\r\n        axios.put(`${apiUrl}/${todo.id}`, todo)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: TOGGLE_TODO,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw (error);\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//Todo 삭제\r\nexport const removeTodo = id => {\r\n    return (dispatch) => {\r\n        axios.delete(`${apiUrl}/${id}`)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: REMOVE_TODO,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw (error);\r\n            })\r\n    }\r\n}\r\n\r\n//Todo 등록\r\nexport const addTodo = (todo) => {\r\n    return (dispatch) => {\r\n        axios.post(apiUrl, todo)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: ADD_TODO,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw (error);\r\n            })\r\n    }\r\n}\r\n\r\n//Todo목록 조회 Action 생성 함수 정의\r\nexport const fetchAllTodos = () => {\r\n    return (dispatch) => {\r\n        axios.get(apiUrl)\r\n            .then(res => dispatch({\r\n                type: FETCH_TODOS,\r\n                payload: res.data\r\n            }))\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw (error);\r\n            })\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './Form.css';\r\nimport { connect } from 'react-redux';\r\nimport { addTodo } from '../actions';\r\n\r\nclass Form extends Component {\r\n    state = {\r\n        input: ''\r\n    };\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            input: e.target.value // input 의 다음 바뀔 값\r\n        });\r\n    };\r\n    handleCreate = () => {\r\n        this.props.addTodo(\r\n            {\r\n                text: this.state.input,\r\n                checked: false,\r\n            });\r\n        this.setState({ input: '' });\r\n    };\r\n    handleKeyPress = (e) => {\r\n        // 눌려짂 키가 Enter 이면 handleCreate 호출\r\n        if (e.key === 'Enter') {\r\n            this.handleCreate();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {input} = this.state;\r\n        const {handleChange, handleCreate, handleKeyPress} = this;\r\n\r\n        return (\r\n            <div className=\"form\">\r\n                <input value={input} onChange={handleChange}\r\n                    onKeyPress={handleKeyPress} />\r\n                <div className=\"create-button\" onClick={handleCreate}>\r\n                    추가\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, { addTodo })(Form);","import React, { Component } from 'react';\r\nimport './TodoItem.css';\r\nimport { connect } from 'react-redux';\r\nimport { removeTodo, toggleTodo } from '../actions';\r\n\r\nclass TodoItem extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.checked !== nextProps.checked;\r\n    };\r\n\r\n    handleRemove = (id) => {\r\n        this.props.removeTodo(id);\r\n    };\r\n\r\n    handleToggle = (todo) => {\r\n        this.props.toggleTodo(todo)\r\n    };\r\n\r\n    render() {\r\n        const { text, checked, id } = this.props;\r\n        const {handleRemove} = this;\r\n\r\n        return (\r\n            <div className=\"todo-item\" onClick={() => {\r\n                const todo = { id, text, checked };\r\n                todo.checked = !todo.checked;\r\n                this.handleToggle(todo);\r\n            }}>\r\n                <div className=\"remove\" onClick={(e) => {\r\n                    e.stopPropagation(); // onToggle 이 실행되지 않도록 함\r\n                    handleRemove(id)\r\n                }\r\n                }>&times;</div>\r\n                <div className={`todo-text ${checked && 'checked'}`}>\r\n                    <div>{text}</div>\r\n                </div>\r\n                {\r\n                    checked && (<div className=\"check-mark\">✓</div>)\r\n                }\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, { removeTodo,toggleTodo })(TodoItem);","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport { connect } from 'react-redux'\r\nimport { fetchAllTodos } from '../actions'\r\n\r\nclass TodoItemList extends Component {\r\n    componentDidMount() {\r\n        this.props.fetchAllTodos();\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.todos !== nextProps.todos;\r\n    }\r\n    \r\n    render() {\r\n        const { todos } = this.props;\r\n        const todoList = todos.map(\r\n            ({ id, text, checked }) => (\r\n                <TodoItem\r\n                    id={id}\r\n                    text={text}\r\n                    checked={checked}\r\n                    key={id}\r\n                />\r\n            )\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                {todoList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        todos: state.todos\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps,{fetchAllTodos})(TodoItemList);","import React, { Component } from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\n\n// const initialTodos = new Array(500).fill(0).map(\n//   (item, idx) => ({ id: idx, text: `일정 ${idx}`, checked: true })\n//   );  \n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div>\n        <TodoListTemplate form={<Form />}>\n          <TodoItemList />\n        </TodoListTemplate>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FETCH_TODOS, ADD_TODO, REMOVE_TODO, TOGGLE_TODO } from '../actions';\r\n\r\n//state 객체 초기값 설정\r\nconst initialState = {\r\n    //todos 상태변수 \r\n    todos: [\r\n        {\r\n            id: 0,\r\n            text: '',\r\n            checked: false,\r\n        }\r\n    ]\r\n}\r\n\r\n//reducer 함수\r\nexport const toDoReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_TODOS:\r\n            //return Object.assign({}, state, { todos: action.payload });\r\n        case REMOVE_TODO:\r\n        case TOGGLE_TODO:    \r\n        case ADD_TODO:\r\n            return Object.assign({}, state, { todos: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { toDoReducer } from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(toDoReducer, \n    composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}